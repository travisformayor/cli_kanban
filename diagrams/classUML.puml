@startuml classUML

Task "*" -- "1" Board : tasks
Task "*" -- "1" Database
Board "*" -- "1" Database

enum Stage {
  ToDo
  InProgress
  Done
}

class Task {
  -id: int
  -title: string
  -description: string
  -stage: Stage
  -difficultyScore: int
  -active: bool
  +Task(title: string, board: Board&)
  +~Task()
  +setId(id: int): void
  +setTitle(newTitle: string): void
  +setDescription(newDesc: string): void
  +setStage(newStage: Stage): void
  +setDifficultyScore(score: int): void
  +setActive(active: bool): void
  +isActive(): bool
  +getId(): int
  +getTitle(): string
  +getDescription(): string
  +getStage(): Stage
  +getDifficultyScore(): int
  +stageToString(stage: Stage): string
  +stringToStage(stageStr: string): Stage
}

class Board {
  -id: int
  -name: string
  -tasks: list<Task*>
  -active: bool
  +Board(name: string)
  +~Board()
  +setId(id: int): void
  +setName(newName: string): void
  +addTask(task: Task&): void
  +removeTask(task: Task&): void
  +setActive(active: bool): void
  +isActive(): bool
  +getId(): int
  +getName(): string
  +getTasks(): list<Task*>
  +findById(boards: list<Board*>, id: int): Board*
}

class Database {
  -dbName: string
  -db: sqlite3*
  +Database(dbName: string)
  +~Database()
  +createTables(): void
  +deleteTables(): void
  +executeQuery(sql: string, dataMap: map<string, variant<int, string>>): int
  +queryString(tableName: string, dataMap: map<string, variant<int, string>>): string
  +saveBoardData(board: Board&): void
  +saveTaskData(task: Task&): void
  +loadBoardData(): list<Board*>
  +loadTaskData(boards: list<Board*>): list<Task*>
  +deleteTask(task: Task&): void
  +deleteBoard(board: Board& board): void
}

@enduml
