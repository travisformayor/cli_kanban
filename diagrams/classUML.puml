@startuml classUML

title Class UML Diagram

Task "*" -- "1" Board : tasks
Task "*" -- "1" Database
Board "*" -- "1" Database
Board "*" -- "1" UI
Task "*" -- "1" UI
UI "1" -- "1" Database

enum Stage {
  ToDo
  InProgress
  Done
}

class Task {
  -id: int
  -title: string
  -description: string
  -stage: Stage
  -difficultyRating: int
  -boardId: int
  +Task(title: string, board: Board&)
  +~Task()
  +setId(id: int): void
  +setTitle(newTitle: string): void
  +setDescription(newDesc: string): void
  +setStage(newStage: Stage, loading: bool): void
  +setDifficulty(rating: int): void
  +setBoardId(boardId: int): void
  +getId(): int
  +getTitle(): string
  +getDescription(): string
  +getStage(): Stage
  +getDifficultyRating(): int
  +getBoardId(): int
  +stageToString(stage: Stage): string
  +stringToStage(stageStr: string): Stage
}

class Board {
  -id: int
  -title: string
  -tasks: list<Task*>
  +Board(title: string)
  +~Board()
  +setId(id: int): void
  +setTitle(newTitle: string): void
  +setTasks(tasks: list<Task*>&): void
  +getId(): int
  +getTitle(): string
  +getTasks(): list<Task*>
  +getTaskById(id: int): Task*
}

class UI {
  -TEXT_WHITE: WORD
  -TEXT_GREEN: WORD
  -db: Database
  -screenMenus: map<string, string>
  -userAlerts: list<string>
  -screenWidth: int
  -padL: string
  -padHeader: string
  -selectedIndex: int
  -currScreen: string
  -loadedBoards: list<Board*>
  -activeBoardId: int
  -activeTaskId: int
  +UI(db: Database&)
  +~UI()
  +setTextColor(color: WORD): void
  +setSelectIndex(index: int): void
  +displayScreen(): void
  +displayTitles(titles: map<string, list<string>>&): void
  +displayTaskCard(task: Task*): void
  +wrapAndPrint(text: string, line_length: int): void
  +getUserInput(prompt: string): string
  +addAlert(alert: string): void
  +keyboardListen(): void
  +moveSelector(direction: int): void
  +changeScreen(command: string): void
  +getBoardById(id: int): Board*
  +reloadBoards(): void
  +reloadBoardTasks(): void
  +findSelectedBoard(): void
  +findSelectedTask(): void
  +addNewBoard(): void
  +addNewTask(): void
  +deleteSelectedBoard(): void
  +deleteSelectedTask(): void
  +editBoardTitle(): void
  +editTaskTitle(): void
  +editTaskDescription(): void
  +editTaskStage(): void
  +editTaskRating(): void
}

class Database {
  -dbName: string
  -db: sqlite3*
  +Database(dbName: string)
  +~Database()
  +createTables(): void
  +deleteTables(): void
  +executeQuery(sql: string, dataMap: map<string, variant<int, string>>): int
  +queryString(tableName: string, dataMap: map<string, variant<int, string>>): string
  +saveBoardData(board: Board&): void
  +saveTaskData(task: Task&): void
  +deleteBoard(board: Board&): void
  +deleteTask(task: Task&): void
  +loadBoardsList(): list<Board*>
  +loadTaskData(board: Board&): list<Task*>
}

@enduml
