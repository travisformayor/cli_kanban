@startuml sequenceDiagram

actor User
participant "Task" as T
participant "Board" as B
participant "Database" as DB

User -> DB: loadUserData()
activate DB
DB --> User: userData
deactivate DB

User -> DB: loadBoardData()
activate DB
DB --> User: boardData
deactivate DB

alt User creates a new Board
  User -> B: createBoard()
  activate B
  B -> DB: saveBoardData()
  activate DB
  DB --> B: confirm
  deactivate DB
  deactivate B
end

User -> DB: loadTaskData()
activate DB
DB --> User: taskData
deactivate DB

User -> T: createTask()
activate T
T -> DB: saveTaskData()
activate DB
DB --> T: confirm
deactivate DB
deactivate T

User -> B: addTask(T)
activate B
B -> DB: saveBoardData()
activate DB
DB --> B: confirm
deactivate DB
deactivate B

'change to In Progress
User -> T: setStage("In Progress")
activate T
alt Task has assigned user, description, and difficulty
  T -> DB: saveTaskData()
  activate DB
  DB --> T: confirm
  deactivate DB
else Task missing assigned user, description, or difficulty
  T --> User: error() 
  deactivate T
  User -> T: setDescription()
  activate T
  T -> DB: saveTaskData()
  activate DB
  DB --> T: confirm
  deactivate DB
  deactivate T
  User -> T: setDifficulty()
  activate T
  T -> DB: saveTaskData()
  activate DB
  DB --> T: confirm
  deactivate DB
  deactivate T
  User -> T: setAssignedUser()
  activate T
  T -> DB: saveTaskData()
  activate DB
  DB --> T: confirm
  deactivate DB
  deactivate T
  User -> T: setStage("In Progress")
  activate T
  T -> DB: saveTaskData()
  activate DB
  DB --> T: confirm
  deactivate DB
  deactivate T
end

User -> T: setStage("Done")
activate T
T -> DB: saveTaskData()
activate DB
DB --> T: confirm
deactivate DB
deactivate T

User -> B: deleteBoard()
activate B
B -> DB: deleteBoardData()
activate DB
DB --> B: confirm
deactivate DB
deactivate B

User -> DB: saveUserData()
activate DB
DB --> User: confirm
deactivate DB

@enduml
